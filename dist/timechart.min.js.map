{"version":3,"file":"timechart.min.js","sources":["../src/utils.ts","../src/renderModel.ts","../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/vec2.js","../src/lineChartRenderer.ts","../src/webGLUtils.ts","../src/options.ts","../src/canvasLayer.ts","../src/svgLayer.ts","../src/chartZoom/utils.ts","../src/chartZoom/options.ts","../src/chartZoom/touch.ts","../src/chartZoom/wheel.ts","../src/chartZoom/mouse.ts","../src/chartZoom/index.ts","../src/index.ts"],"sourcesContent":["/** lower bound */\nexport function domainSearch<T>(data: ArrayLike<T>, start: number, end: number, value: number, key: (v: T) => number) {\n    if (start >= end) {\n        return start;\n    }\n\n    if (value <= key(data[start])) {\n        return start;\n    }\n    if (value > key(data[end - 1])) {\n        return end;\n    }\n\n    end -= 1;\n    while (start + 1 < end) {\n        const minDomain = key(data[start]);\n        const maxDomain = key(data[end]);\n        const ratio = maxDomain <= minDomain ? 0 : (value - minDomain) / (maxDomain - minDomain);\n        let expectedIndex = Math.ceil(start + ratio * (end - start));\n        if (expectedIndex === end)\n            expectedIndex--;\n        else if (expectedIndex === start)\n            expectedIndex++;\n        const domain = key(data[expectedIndex]);\n\n        if (domain < value) {\n            start = expectedIndex;\n        } else {\n            end = expectedIndex;\n        }\n    }\n    return end;\n}\n\nexport class EventDispatcher<TArgs extends Array<any>>  {\n    private callbacks: Array<(...args: TArgs) => void> = []\n    on(callback: (...args: TArgs) => void) {\n        this.callbacks.push(callback);\n    }\n    dispatch(...args: TArgs) {\n        for (const cb of this.callbacks) {\n            cb(...args);\n        }\n    }\n}\n","import { TimeChartSeriesOptions, ResolvedRenderOptions } from './options';\nimport { scaleLinear } from \"d3-scale\";\nimport { EventDispatcher } from './utils';\n\ninterface DataSeriesInfo {\n    yRangeUpdatedIndex: number;\n}\n\nexport interface DataPoint {\n    x: number;\n    y: number;\n}\n\ninterface MinMax { min: number; max: number; }\n\nfunction maxMin(arr: number[]): MinMax {\n    let max = -Infinity;\n    let min = Infinity;\n    for (const v of arr) {\n        if (v > max) max = v;\n        if (v < min) min = v;\n    }\n    return { max, min };\n}\n\nexport class RenderModel {\n    xScale = scaleLinear();\n    yScale = scaleLinear();\n    xRange: MinMax | null = null;\n    yRange: MinMax | null = null;\n    private seriesInfo = new Map<TimeChartSeriesOptions, DataSeriesInfo>();\n\n    constructor(private options: ResolvedRenderOptions) {\n        if (options.xRange !== 'auto' && options.xRange) {\n            this.xScale.domain([options.xRange.min, options.xRange.max])\n        }\n        if (options.yRange !== 'auto' && options.yRange) {\n            this.yScale.domain([options.yRange.min, options.yRange.max])\n        }\n    }\n\n    resize(width: number, height: number) {\n        const op = this.options;\n        this.xScale.range([op.paddingLeft, width - op.paddingRight]);\n        this.yScale.range([height - op.paddingBottom, op.paddingTop]);\n    }\n\n    updated = new EventDispatcher<[]>();\n\n    update() {\n        for (const s of this.options.series) {\n            if (!this.seriesInfo.has(s)) {\n                this.seriesInfo.set(s, {\n                    yRangeUpdatedIndex: 0,\n                });\n            }\n        }\n\n        const series = this.options.series.filter(s => s.data.length > 0);\n        if (series.length === 0) {\n            return;\n        }\n\n        const opXRange = this.options.xRange;\n        const opYRange = this.options.yRange;\n\n        {\n            const maxDomain = Math.max(...series.map(s => s.data[s.data.length - 1].x));\n            const minDomain = this.xRange?.min ?? Math.min(...series.map(s => s.data[0].x));\n            this.xRange = { max: maxDomain, min: minDomain };\n            if (this.options.realTime || opXRange === 'auto') {\n                if (this.options.realTime) {\n                    const currentDomain = this.xScale.domain();\n                    const range = currentDomain[1] - currentDomain[0];\n                    this.xScale.domain([maxDomain - range, maxDomain]);\n                } else { // Auto\n                    this.xScale.domain([minDomain, maxDomain]);\n                }\n            } else if (opXRange) {\n                this.xScale.domain([opXRange.min, opXRange.max])\n            }\n        }\n        {\n            const maxMinY = series.map(s => {\n                const newY = s.data.slice(this.seriesInfo.get(s)!.yRangeUpdatedIndex).map(d => d.y)\n                return maxMin(newY);\n            })\n            if (this.yRange) {\n                maxMinY.push(this.yRange);\n            }\n            const minDomain = Math.min(...maxMinY.map(s => s.min));\n            const maxDomain = Math.max(...maxMinY.map(s => s.max));\n            this.yRange = { max: maxDomain, min: minDomain };\n            if (opYRange === 'auto') {\n                this.yScale.domain([minDomain, maxDomain]).nice();\n                for (const s of series) {\n                    this.seriesInfo.get(s)!.yRangeUpdatedIndex = s.data.length;\n                }\n            } else if (opYRange) {\n                this.yScale.domain([opYRange.min, opYRange.max])\n            }\n        }\n\n        this.updated.dispatch();\n    }\n\n    private redrawRequested = false;\n    requestRedraw() {\n        if (this.redrawRequested) {\n            return;\n        }\n        this.redrawRequested = true;\n        requestAnimationFrame((time) => {\n            this.redrawRequested = false;\n            this.update();\n        });\n    }\n}\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import { vec2, vec3, mat4 } from 'gl-matrix';\n\nimport { RenderModel, DataPoint } from \"./renderModel\";\nimport { LinkedWebGLProgram, throwIfFalsy } from './webGLUtils';\nimport { domainSearch } from './utils';\nimport { resolveColorRGBA, TimeChartSeriesOptions, ResolvedRenderOptions } from './options';\n\nconst enum VertexAttribLocations {\n    DATA_POINT = 0,\n    DIR = 1,\n}\n\nconst vsSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.DATA_POINT}) in vec2 aDataPoint;\nlayout (location = ${VertexAttribLocations.DIR}) in vec2 aDir;\n\nuniform vec2 uModelScale;\nuniform vec2 uModelTranslation;\nuniform vec2 uProjectionScale;\nuniform float uLineWidth;\n\nvoid main() {\n    vec2 cssPose = uModelScale * aDataPoint + uModelTranslation;\n    vec2 dir = uModelScale * aDir;\n    dir = normalize(dir);\n    vec2 pos2d = uProjectionScale * (cssPose + vec2(-dir.y, dir.x) * uLineWidth);\n    gl_Position = vec4(pos2d, 0, 1);\n}\n`;\n\nconst fsSource = `#version 300 es\nprecision lowp float;\n\nuniform vec4 uColor;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = uColor;\n}\n`;\n\nclass LineChartWebGLProgram extends LinkedWebGLProgram {\n    locations: {\n        uModelScale: WebGLUniformLocation;\n        uModelTranslation: WebGLUniformLocation;\n        uProjectionScale: WebGLUniformLocation;\n        uLineWidth: WebGLUniformLocation;\n        uColor: WebGLUniformLocation;\n    };\n    constructor(gl: WebGLRenderingContext, debug: boolean) {\n        super(gl, vsSource, fsSource, debug);\n        this.locations = {\n            uModelScale: throwIfFalsy(gl.getUniformLocation(this.program, 'uModelScale')),\n            uModelTranslation: throwIfFalsy(gl.getUniformLocation(this.program, 'uModelTranslation')),\n            uProjectionScale: throwIfFalsy(gl.getUniformLocation(this.program, 'uProjectionScale')),\n            uLineWidth: throwIfFalsy(gl.getUniformLocation(this.program, 'uLineWidth')),\n            uColor: throwIfFalsy(gl.getUniformLocation(this.program, 'uColor')),\n        }\n    }\n}\n\nconst INDEX_PER_POINT = 4;\nconst POINT_PER_DATAPOINT = 4;\nconst INDEX_PER_DATAPOINT = INDEX_PER_POINT * POINT_PER_DATAPOINT;\nconst BYTES_PER_POINT = INDEX_PER_POINT * Float32Array.BYTES_PER_ELEMENT;\nconst BUFFER_DATA_POINT_CAPACITY = 128 * 1024;\nconst BUFFER_CAPACITY = BUFFER_DATA_POINT_CAPACITY * INDEX_PER_DATAPOINT + 2 * POINT_PER_DATAPOINT;\n\nclass VertexArray {\n    vao: WebGLVertexArrayObject;\n    dataBuffer: WebGLBuffer;\n    length = 0;\n\n    /**\n     * @param firstDataPointIndex At least 1, since datapoint 0 has no path to draw.\n     */\n    constructor(\n        private gl: WebGL2RenderingContext,\n        private dataPoints: ArrayLike<DataPoint>,\n        public readonly firstDataPointIndex: number,\n    ) {\n        this.vao = throwIfFalsy(gl.createVertexArray());\n        this.bind();\n\n        this.dataBuffer = throwIfFalsy(gl.createBuffer());\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.dataBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, BUFFER_CAPACITY * Float32Array.BYTES_PER_ELEMENT, gl.DYNAMIC_DRAW);\n\n        gl.enableVertexAttribArray(VertexAttribLocations.DATA_POINT);\n        gl.vertexAttribPointer(VertexAttribLocations.DATA_POINT, 2, gl.FLOAT, false, BYTES_PER_POINT, 0);\n\n        gl.enableVertexAttribArray(VertexAttribLocations.DIR);\n        gl.vertexAttribPointer(VertexAttribLocations.DIR, 2, gl.FLOAT, false, BYTES_PER_POINT, 2 * Float32Array.BYTES_PER_ELEMENT);\n    }\n\n    bind() {\n        this.gl.bindVertexArray(this.vao);\n    }\n\n    clear() {\n        this.length = 0;\n    }\n\n    delete() {\n        this.clear();\n        this.gl.deleteBuffer(this.dataBuffer);\n        this.gl.deleteVertexArray(this.vao);\n    }\n\n    /**\n     * @returns Next data point index, or `dataPoints.length` if all data added.\n     */\n    addDataPoints(): number {\n        const dataPoints = this.dataPoints;\n        const start = this.firstDataPointIndex + this.length;\n\n        const remainDPCapacity = BUFFER_DATA_POINT_CAPACITY - this.length;\n        const remainDPCount = dataPoints.length - start\n        const isOverflow = remainDPCapacity < remainDPCount;\n        const numDPtoAdd = isOverflow ? remainDPCapacity : remainDPCount;\n        let extraBufferLength = INDEX_PER_DATAPOINT * numDPtoAdd;\n        if (isOverflow) {\n            extraBufferLength += 2 * INDEX_PER_POINT;\n        }\n\n        const buffer = new Float32Array(extraBufferLength);\n        let bi = 0;\n        const vDP = vec2.create()\n        const vPreviousDP = vec2.create()\n        const dir1 = vec2.create();\n        const dir2 = vec2.create();\n\n        function calc(dp: DataPoint, previousDP: DataPoint) {\n            vDP[0] = dp.x;\n            vDP[1] = dp.y;\n            vPreviousDP[0] = previousDP.x;\n            vPreviousDP[1] = previousDP.y;\n            vec2.subtract(dir1, vDP, vPreviousDP);\n            vec2.normalize(dir1, dir1);\n            vec2.negate(dir2, dir1);\n        }\n\n        function put(v: vec2) {\n            buffer[bi] = v[0];\n            buffer[bi + 1] = v[1];\n            bi += 2;\n        }\n\n        let previousDP = dataPoints[start - 1];\n        for (let i = 0; i < numDPtoAdd; i++) {\n            const dp = dataPoints[start + i];\n            calc(dp, previousDP);\n            previousDP = dp;\n\n            for (const dp of [vPreviousDP, vDP]) {\n                for (const dir of [dir1, dir2]) {\n                    put(dp);\n                    put(dir);\n                }\n            }\n        }\n\n        if (isOverflow) {\n            calc(dataPoints[start + numDPtoAdd], previousDP);\n            for (const dir of [dir1, dir2]) {\n                put(vPreviousDP);\n                put(dir);\n            }\n        }\n\n        const gl = this.gl;\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.dataBuffer);\n        gl.bufferSubData(gl.ARRAY_BUFFER, BYTES_PER_POINT * POINT_PER_DATAPOINT * this.length, buffer);\n\n        this.length += numDPtoAdd;\n        return start + numDPtoAdd;\n    }\n\n    draw(renderIndex: { min: number, max: number }) {\n        const first = Math.max(0, renderIndex.min - this.firstDataPointIndex);\n        const last = Math.min(this.length, renderIndex.max - this.firstDataPointIndex)\n        const count = last - first;\n\n        const gl = this.gl;\n        this.bind();\n        gl.drawArrays(gl.TRIANGLE_STRIP, first * POINT_PER_DATAPOINT, count * POINT_PER_DATAPOINT);\n    }\n}\n\n/**\n * An array of `VertexArray` to represent a series\n *\n * `series.data`  index: 0  [1 ... C] [C+1 ... 2C] ... (C = `BUFFER_DATA_POINT_CAPACITY`)\n * `vertexArrays` index:     0         1           ...\n */\nclass SeriesVertexArray {\n    private vertexArrays = [] as VertexArray[];\n    constructor(\n        private gl: WebGL2RenderingContext,\n        private series: TimeChartSeriesOptions,\n    ) {\n    }\n\n    syncBuffer() {\n        let activeArray: VertexArray;\n        let bufferedDataPointNum = 1;\n\n        const newArray = () => {\n            activeArray = new VertexArray(this.gl, this.series.data , bufferedDataPointNum);\n            this.vertexArrays.push(activeArray);\n        }\n\n        if (this.vertexArrays.length > 0) {\n            const lastVertexArray = this.vertexArrays[this.vertexArrays.length - 1];\n            bufferedDataPointNum = lastVertexArray.firstDataPointIndex + lastVertexArray.length;\n            if (bufferedDataPointNum > this.series.data.length) {\n                throw new Error('remove data unsupported.');\n            }\n            if (bufferedDataPointNum === this.series.data.length) {\n                return;\n            }\n            activeArray = lastVertexArray;\n        } else if (this.series.data.length >= 2) {\n            newArray();\n            activeArray = activeArray!;\n        } else {\n            return; // Not enough data\n        }\n\n        while (true) {\n            bufferedDataPointNum = activeArray.addDataPoints();\n            if (bufferedDataPointNum >= this.series.data.length) {\n                if (bufferedDataPointNum > this.series.data.length) { throw Error('Assertion failed.'); }\n                break;\n            }\n            newArray();\n        }\n    }\n\n    draw(renderDomain: { min: number, max: number }) {\n        const data = this.series.data;\n        if (data.length === 0 || data[0].x > renderDomain.max || data[data.length - 1].x < renderDomain.min) {\n            return;\n        }\n\n        const key = (d: DataPoint) => d.x\n        const minIndex = domainSearch(data, 1, data.length, renderDomain.min, key);\n        const maxIndex = domainSearch(data, minIndex, data.length - 1, renderDomain.max, key) + 1;\n        const minArrayIndex = Math.floor((minIndex - 1) / BUFFER_DATA_POINT_CAPACITY);\n        const maxArrayIndex = Math.ceil((maxIndex - 1) / BUFFER_DATA_POINT_CAPACITY);\n\n        const renderIndex = { min: minIndex, max: maxIndex };\n        for (let i = minArrayIndex; i < maxArrayIndex; i++) {\n            this.vertexArrays[i].draw(renderIndex);\n        }\n    }\n}\n\nexport class LineChartRenderer {\n    private program = new LineChartWebGLProgram(this.gl, this.options.debugWebGL);\n    private arrays = new Map<TimeChartSeriesOptions, SeriesVertexArray>();\n    private height = 0;\n    private width = 0;\n\n    constructor(\n        private model: RenderModel,\n        private gl: WebGL2RenderingContext,\n        private options: ResolvedRenderOptions,\n    ) {\n        model.updated.on(() => this.drawFrame());\n        this.program.use();\n    }\n\n    syncBuffer() {\n        for (const s of this.options.series) {\n            let a = this.arrays.get(s);\n            if (!a) {\n                a = new SeriesVertexArray(this.gl, s);\n                this.arrays.set(s, a);\n            }\n            a.syncBuffer();\n        }\n    }\n\n    onResize(width: number, height: number) {\n        this.height = height;\n        this.width = width;\n\n        const scale = vec2.fromValues(width, height)\n        vec2.divide(scale, scale, [2, 2])\n        vec2.inverse(scale, scale)\n\n        const gl = this.gl;\n        gl.uniform2fv(this.program.locations.uProjectionScale, scale);\n    }\n\n    drawFrame() {\n        this.syncBuffer();\n        this.syncDomain();\n        const gl = this.gl;\n        for (const [ds, arr] of this.arrays) {\n            const color = resolveColorRGBA(ds.color);\n            gl.uniform4fv(this.program.locations.uColor, color);\n\n            const lineWidth = ds.lineWidth ?? this.options.lineWidth;\n            gl.uniform1f(this.program.locations.uLineWidth, lineWidth / 2);\n\n            const renderDomain = {\n                min: this.model.xScale.invert(-lineWidth / 2),\n                max: this.model.xScale.invert(this.width + lineWidth / 2),\n            };\n            arr.draw(renderDomain);\n        }\n    }\n\n    private ySvgToView(v: number) {\n        return -v + this.height / 2;\n    }\n\n    private xSvgToView(v: number) {\n        return v - this.width / 2;\n    }\n\n    syncDomain() {\n        const m = this.model;\n        const gl = this.gl;\n\n        const zero = [this.xSvgToView(m.xScale(0)), this.ySvgToView(m.yScale(0))];\n        const one = [this.xSvgToView(m.xScale(1)), this.ySvgToView(m.yScale(1))];\n\n        const scaling = vec2.create();\n        vec2.subtract(scaling, one, zero);\n\n        gl.uniform2fv(this.program.locations.uModelScale, scaling);\n        gl.uniform2fv(this.program.locations.uModelTranslation, zero);\n    }\n}\n","export class LinkedWebGLProgram {\n    program: WebGLProgram;\n\n    constructor(private gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string, debug: boolean) {\n        const program = throwIfFalsy(gl.createProgram());\n        gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource, debug)));\n        gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource, debug)));\n        gl.linkProgram(program);\n        if (debug) {\n            const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n            if (!success) {\n                const message = gl.getProgramInfoLog(program) ?? 'Unknown Error.';\n                gl.deleteProgram(program);\n                throw new Error(message);\n            }\n        }\n\n        this.program = program\n    }\n\n    public use() {\n        this.gl.useProgram(this.program);\n    }\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string, debug: boolean): WebGLShader {\n    const shader = throwIfFalsy(gl.createShader(type));\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (debug) {\n        const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        if (!success) {\n            const message = gl.getShaderInfoLog(shader) ?? 'Unknown Error.';\n            gl.deleteShader(shader);\n            throw new Error(message);\n        }\n    }\n    return shader\n}\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n    if (!value) {\n        throw new Error('value must not be falsy');\n    }\n    return value;\n}\n","import { ColorSpaceObject, ColorCommonInstance, rgb } from 'd3-color';\nimport { DataPoint } from './renderModel';\n\ntype ColorSpecifier = ColorSpaceObject | ColorCommonInstance | string\n\ninterface AxisZoomOptions {\n    autoRange: boolean;\n    minDomain: number;\n    maxDomain: number;\n    minDomainExtent: number;\n    maxDomainExtent: number;\n}\n\nexport interface ZoomOptions {\n    x?: Partial<AxisZoomOptions>;\n    y?: Partial<AxisZoomOptions>;\n}\n\nexport interface ResolvedZoomOptions {\n    x?: AxisZoomOptions;\n    y?: AxisZoomOptions;\n}\n\ninterface TimeChartRenderOptions {\n    pixelRatio: number;\n    lineWidth: number;\n    backgroundColor: ColorSpecifier;\n    paddingLeft: number;\n    paddingRight: number;\n    paddingTop: number;\n    paddingBottom: number;\n\n    xRange: { min: number | Date, max: number | Date } | 'auto' | null;\n    yRange: { min: number, max: number } | 'auto' | null;\n    realTime: boolean;\n\n    /** Milliseconds since `new Date(0)`. Every x in data are relative to this.\n     *\n     * Set this option and keep the absolute value of x small for higher floating point precision.\n     **/\n    baseTime: number;\n\n    debugWebGL: boolean;\n}\n\ninterface TimeChartOptionsBase extends TimeChartRenderOptions {\n}\n\nexport interface TimeChartOptions extends Partial<TimeChartOptionsBase> {\n    series?: Partial<TimeChartSeriesOptions>[];\n    zoom?: ZoomOptions;\n}\n\nexport interface ResolvedRenderOptions extends TimeChartRenderOptions {\n    series: TimeChartSeriesOptions[];\n}\n\nexport interface ResolvedOptions extends ResolvedRenderOptions {\n    zoom?: ResolvedZoomOptions;\n}\n\nexport interface TimeChartSeriesOptions {\n    data: DataPoint[];\n    lineWidth?: number;\n    name: string;\n    color: ColorSpecifier;\n}\n\nexport function resolveColorRGBA(color: ColorSpecifier): [number, number, number, number] {\n    const rgbColor = typeof color === 'string' ? rgb(color) : rgb(color);\n    return [rgbColor.r / 255, rgbColor.g / 255, rgbColor.b / 255, rgbColor.opacity];\n}\n","import { resolveColorRGBA, ResolvedRenderOptions } from './options';\nimport { RenderModel } from './renderModel';\n\nexport class CanvasLayer {\n    canvas: HTMLCanvasElement\n    gl: WebGL2RenderingContext;\n\n    constructor(el: HTMLElement, private options: ResolvedRenderOptions, model: RenderModel) {\n        model.updated.on(() => this.clear());\n\n        el.style.position = 'relative';\n        const canvas = document.createElement('canvas');\n        canvas.style.width = '100%';\n        canvas.style.height = '100%';\n        canvas.style.position = 'absolute';\n        el.appendChild(canvas);\n\n        const ctx = canvas.getContext('webgl2');\n        if (!ctx) {\n            throw new Error('Unable to initialize WebGL. Your browser or machine may not support it.');\n        }\n        const gl = ctx;\n        this.gl = gl;\n\n        const bgColor = resolveColorRGBA(options.backgroundColor);\n        gl.clearColor(...bgColor);\n\n        this.canvas = canvas;\n    }\n\n    onResize() {\n        const canvas = this.canvas;\n        const scale = this.options.pixelRatio;\n        canvas.width = canvas.clientWidth * scale;\n        canvas.height = canvas.clientHeight * scale;\n        this.gl.viewport(0, 0, canvas.width, canvas.height);\n    }\n\n    clear() {\n        const gl = this.gl;\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n}\n","import { axisBottom, axisLeft } from \"d3-axis\";\nimport { scaleTime } from  'd3-scale'\nimport { select, Selection } from \"d3-selection\";\n\nimport { ResolvedRenderOptions } from './options';\nimport { RenderModel } from './renderModel';\n\nexport class SVGLayer {\n    xg: Selection<SVGGElement, unknown, null, undefined>;\n    yg: Selection<SVGGElement, unknown, null, undefined>;\n    xAxis = axisBottom(this.model.xScale);\n    yAxis = axisLeft(this.model.yScale);\n\n    svgNode: SVGSVGElement;\n\n    constructor(el: HTMLElement,\n        private options: ResolvedRenderOptions,\n        private model: RenderModel,\n    ) {\n        model.updated.on(() => this.update());\n\n        el.style.position = 'relative';\n\n        const svg = select(el).append('svg')\n            .style('position', 'absolute')\n            .style('width', '100%')\n            .style('height', '100%');\n        this.svgNode = svg.node()!;\n        this.xg = svg.append('g');\n        this.yg = svg.append('g');\n    }\n\n    update() {\n        const xs = this.model.xScale;\n        const xts = scaleTime()\n            .domain(xs.domain().map(d => d + this.options.baseTime))\n            .range(xs.range());\n        this.xAxis.scale(xts);\n        this.xg.call(this.xAxis);\n\n        this.yAxis.scale(this.model.yScale);\n        this.yg.call(this.yAxis);\n    }\n\n    onResize() {\n        const svg = this.svgNode;\n        const op = this.options;\n        this.xg.attr('transform', `translate(0, ${svg.clientHeight - op.paddingBottom})`);\n        this.yg.attr('transform', `translate(${op.paddingLeft}, 0)`);\n\n        this.update()\n    }\n}\n","import { ScaleLinear } from 'd3-scale';\nimport { ResolvedAxisOptions } from './options';\n\nexport function zip<T1, T2>(...rows: [T1[], T2[]]) {\n    return [...rows[0]].map((_, c) => rows.map(row => row[c])) as [T1, T2][];\n}\n\n/**\n * least squares\n *\n * beta^T = [b, k]\n * X = [[1, x_1],\n *      [1, x_2],\n *      [1, x_3], ...]\n * Y^T = [y_1, y_2, y_3, ...]\n * beta = (X^T X)^(-1) X^T Y\n * @returns `{k, b}`\n */\nexport function linearRegression(data: { x: number, y: number }[]) {\n    let sumX = 0;\n    let sumY = 0;\n    let sumXY = 0;\n    let sumXX = 0;\n    const len = data.length;\n\n    for (const p of data) {\n        sumX += p.x;\n        sumY += p.y;\n        sumXY += p.x * p.y;\n        sumXX += p.x * p.x;\n    }\n    const det = (len * sumXX) - (sumX * sumX);\n    const k = det === 0 ? 0 : ((len * sumXY) - (sumX * sumY)) / det;\n    const b = (sumY - k * sumX) / len;\n    return { k, b };\n}\n\nexport function scaleK(scale: ScaleLinear<number, number>) {\n    const domain = scale.domain();\n    const range = scale.range();\n    return (domain[1] - domain[0]) / (range[1] - range[0]);\n}\n\n/**\n * @returns If domain changed\n */\nexport function applyNewDomain(op: ResolvedAxisOptions, domain: number[]) {\n    const inExtent = domain[1] - domain[0];\n\n    const previousDomain = op.scale.domain();\n    if ((previousDomain[1] - previousDomain[0]) * inExtent <= 0) {\n        // forbidden reverse direction.\n        return false;\n    }\n\n    const extent = Math.min(op.maxDomainExtent, op.maxDomain - op.minDomain, Math.max(op.minDomainExtent, inExtent));\n    const deltaE = (extent - inExtent) / 2;\n    domain[0] -= deltaE;\n    domain[1] += deltaE;\n\n    const deltaO = Math.min(Math.max(op.minDomain - domain[0], 0), op.maxDomain - domain[1]);\n    domain[0] += deltaO;\n    domain[1] += deltaO;\n\n    const eps = extent * 1e-6;\n    op.scale.domain(domain);\n    if (zip(domain, previousDomain).some(([d, pd]) => Math.abs(d - pd) > eps)) {\n        return true;\n    }\n    return false;\n}\n\nexport function variance(data: number[]) {\n    const mean = data.reduce((a, b) => a + b)/ data.length;\n    return data.map(d => (d - mean) ** 2).reduce((a, b) => a + b) / data.length;\n}\n\nexport function clamp(value: number, min: number, max: number) {\n    if (value > max) {\n        return max;\n    } else if (value < min) {\n        return min;\n    }\n    return value;\n}\n","import { ScaleLinear } from \"d3-scale\";\n\nexport enum DIRECTION {\n    UNKNOWN, X, Y,\n}\n\nexport interface Point {\n    [DIRECTION.X]: number;\n    [DIRECTION.Y]: number;\n}\n\nexport interface AxisOptions {\n    scale: ScaleLinear<number, number>;\n    minDomain?: number;\n    maxDomain?: number;\n    minDomainExtent?: number;\n    maxDomainExtent?: number;\n}\n\nexport interface ResolvedAxisOptions {\n    scale: ScaleLinear<number, number>;\n    minDomain: number;\n    maxDomain: number;\n    minDomainExtent: number;\n    maxDomainExtent: number;\n}\n\nexport interface ResolvedOptions {\n    x?: ResolvedAxisOptions;\n    y?: ResolvedAxisOptions;\n}\n\nexport interface ChartZoomOptions {\n    x?: AxisOptions;\n    y?: AxisOptions;\n}\n\nexport interface CapableElement extends Element, ElementCSSInlineStyle {\n    addEventListener<K extends keyof GlobalEventHandlersEventMap>(type: K, listener: (this: CapableElement, ev: GlobalEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n};\n\nexport function dirOptions(options: ResolvedOptions) {\n    return [\n        { dir: DIRECTION.X, op: options.x },\n        { dir: DIRECTION.Y, op: options.y },\n    ].filter(i => i.op !== undefined) as {dir: DIRECTION.X | DIRECTION.Y, op: ResolvedAxisOptions}[];\n}\n","import { linearRegression, scaleK, applyNewDomain, variance } from './utils';\nimport { DIRECTION, ResolvedOptions, CapableElement, dirOptions, Point, ResolvedAxisOptions } from './options';\nimport { EventDispatcher } from '../utils';\n\nexport class ChartZoomTouch {\n    public scaleUpdated = new EventDispatcher<[]>();\n\n    private majorDirection = DIRECTION.UNKNOWN;\n    private previousPoints = new Map<number, Point>();\n    private enabled = {\n        [DIRECTION.X]: false,\n        [DIRECTION.Y]: false,\n    };\n\n    constructor(private el: CapableElement, private options: ResolvedOptions) {\n        el.addEventListener('touchstart', e => this.onTouchStart(e), { passive: true });\n        el.addEventListener('touchend', e => this.onTouchEnd(e), { passive: true });\n        el.addEventListener('touchcancel', e => this.onTouchEnd(e), { passive: true });\n        el.addEventListener('touchmove', e => this.onTouchMove(e), { passive: true });\n\n        this.update();\n    }\n\n    update() {\n        this.syncEnabled();\n        this.syncTouchAction();\n    }\n\n    private syncEnabled() {\n        for (const { dir, op } of dirOptions(this.options)) {\n            if (!op) {\n                this.enabled[dir] = false;\n            } else {\n                const domain = op.scale.domain().sort();\n                this.enabled[dir] = op.minDomain < domain[0] && domain[1] < op.maxDomain;\n            }\n        }\n    }\n\n    private syncTouchAction() {\n        const actions = [];\n        if (!this.enabled[DIRECTION.X]) {\n            actions.push('pan-x');\n        }\n        if (!this.enabled[DIRECTION.Y]) {\n            actions.push('pan-y');\n        }\n        if (actions.length === 0) {\n            actions.push('none');\n        }\n        this.el.style.touchAction = actions.join(' ')\n    }\n\n    private calcKB(dir: DIRECTION, op: ResolvedAxisOptions, data: { current: number; domain: number}[]) {\n        if (dir === this.majorDirection && data.length >= 2) {\n            const domain = op.scale.domain();\n            const extent = domain[1] - domain[0];\n            if (variance(data.map(d => d.domain)) > 1e-4 * extent * extent) {\n                return linearRegression(data.map(t => ({ x: t.current, y: t.domain })));\n            }\n        }\n        // Pan only\n        const k = scaleK(op.scale);\n        const b = data.map(t => t.domain - k * t.current).reduce((a, b) => a + b) / data.length;\n        return { k, b };\n    }\n\n    private touchPoints(touches: TouchList) {\n        const boundingBox = this.el.getBoundingClientRect();\n        const ts = new Map([...touches].map(t => [t.identifier, {\n            [DIRECTION.X]: t.clientX - boundingBox.left,\n            [DIRECTION.Y]: t.clientY - boundingBox.top,\n        }]));\n        let changed = false\n        for (const {dir, op} of dirOptions(this.options)) {\n            const scale = op.scale;\n            const temp = [...ts.entries()].map(([id, p]) => ({ current: p[dir], previousPoint: this.previousPoints.get(id) }))\n                .filter(t => t.previousPoint !== undefined)\n                .map(({ current, previousPoint }) => ({ current, domain: scale.invert(previousPoint![dir]) }));\n            if (temp.length === 0) {\n                continue;\n            }\n            const { k, b } = this.calcKB(dir, op, temp);\n            const domain = scale.range().map(r => b + k * r);\n            if (applyNewDomain(op, domain)) {\n                changed = true;\n            }\n        }\n        this.previousPoints = ts;\n\n        if (changed) {\n            this.scaleUpdated.dispatch();\n        }\n        return changed;\n    }\n\n    private dirOptions(dir: DIRECTION.X | DIRECTION.Y) {\n        return {\n            [DIRECTION.X]: this.options.x,\n            [DIRECTION.Y]: this.options.y,\n        }[dir];\n    }\n\n    private onTouchStart(event: TouchEvent) {\n        if (this.majorDirection === DIRECTION.UNKNOWN && event.touches.length >= 2) {\n            const ts = [...event.touches];\n            function vari(data: number[]) {\n                const mean = data.reduce((a, b) => a + b) / data.length;\n                return data.map(d => (d - mean) ** 2).reduce((a, b) => a + b);\n            }\n            const varX = vari(ts.map(t => t.clientX));\n            const varY = vari(ts.map(t => t.clientY));\n            this.majorDirection = varX > varY ? DIRECTION.X : DIRECTION.Y;\n            if (this.dirOptions(this.majorDirection) === undefined) {\n                this.majorDirection = DIRECTION.UNKNOWN;\n            }\n        }\n        this.touchPoints(event.touches);\n    }\n\n    private onTouchEnd(event: TouchEvent) {\n        if (event.touches.length < 2) {\n            this.majorDirection = DIRECTION.UNKNOWN;\n        }\n        this.touchPoints(event.touches);\n    }\n\n    private onTouchMove(event: TouchEvent) {\n        this.touchPoints(event.touches);\n    }\n}\n","import { CapableElement, ResolvedOptions, DIRECTION, dirOptions } from \"./options\";\nimport { EventDispatcher } from '../utils'\nimport { scaleK, applyNewDomain, clamp } from './utils';\n\nexport class ChartZoomWheel {\n    public scaleUpdated = new EventDispatcher<[]>();\n\n    constructor(private el: CapableElement, private options: ResolvedOptions) {\n        el.addEventListener('wheel', ev => this.onWheel(ev));\n    }\n\n    private onWheel(event: WheelEvent) {\n        event.preventDefault();\n\n        let deltaX = event.deltaX;\n        let deltaY = event.deltaY;\n        switch (event.deltaMode) {\n            case 1: // line\n                deltaX *= 30;\n                deltaY *= 30;\n                break;\n            case 2: // page\n                deltaX *= 400;\n                deltaY *= 400;\n                break;\n        }\n        const transform = {\n            [DIRECTION.X]: {\n                translate: 0,\n                zoom: 0,\n            },\n            [DIRECTION.Y]: {\n                translate: 0,\n                zoom: 0,\n            }\n        };\n        if (event.ctrlKey) { // zoom\n            if (event.altKey) {\n                transform[DIRECTION.X].zoom = deltaX;\n                transform[DIRECTION.Y].zoom = deltaY;\n            } else {\n                transform[DIRECTION.X].zoom = (deltaX + deltaY);\n            }\n        } else { // translate\n            if (event.altKey) {\n                transform[DIRECTION.X].translate = deltaX;\n                transform[DIRECTION.Y].translate = deltaY;\n            } else {\n                transform[DIRECTION.X].translate = (deltaX + deltaY);\n            }\n        }\n        const boundingRect = this.el.getBoundingClientRect();\n        const origin = {\n            [DIRECTION.X]: event.clientX - boundingRect.left,\n            [DIRECTION.Y]: event.clientY - boundingRect.top,\n        }\n\n        let changed = false;\n        for (const { dir, op } of dirOptions(this.options)) {\n            const domain = op.scale.domain();\n            const k = scaleK(op.scale);\n            const trans = transform[dir];\n            const transOrigin = op.scale.invert(origin[dir]);\n            trans.translate *= k;\n            trans.zoom *= 0.002;\n            if (event.shiftKey) {\n                trans.translate *= 5;\n                trans.zoom *= 5;\n            }\n\n            const extent = domain[1] - domain[0];\n            const translateCap = 0.4 * extent;\n            trans.translate = clamp(trans.translate, -translateCap, translateCap);\n\n            const zoomCap = 0.5;\n            trans.zoom = clamp(trans.zoom, -zoomCap, zoomCap);\n\n            const newDomain = domain.map(d => d + trans.translate + (d - transOrigin) * trans.zoom);\n            if (applyNewDomain(op, newDomain)) {\n                changed = true;\n            }\n        }\n\n        if (changed) {\n            this.scaleUpdated.dispatch();\n        }\n    }\n}\n","import { CapableElement, ResolvedOptions, Point, DIRECTION, dirOptions } from './options';\nimport { scaleK, applyNewDomain } from './utils';\nimport { EventDispatcher } from '../utils';\n\nexport class ChartZoomMouse {\n    public scaleUpdated = new EventDispatcher<[]>();\n    private previousPoint: Point | null = null;\n\n    constructor(private el: CapableElement, private options: ResolvedOptions) {\n        el.style.userSelect = 'none';\n        el.addEventListener('pointerdown', ev => this.onMouseDown(ev));\n        el.addEventListener('pointerup', ev => this.onMouseUp(ev));\n        el.addEventListener('pointermove', ev => this.onMouseMove(ev));\n    }\n\n    private point(ev: MouseEvent) {\n        const boundingRect = this.el.getBoundingClientRect();\n        return {\n            [DIRECTION.X]: ev.clientX - boundingRect.left,\n            [DIRECTION.Y]: ev.clientY - boundingRect.top,\n        };\n    }\n\n    private onMouseMove(event: PointerEvent) {\n        if (this.previousPoint === null) {\n            return;\n        }\n        const p = this.point(event);\n        let changed = false;\n        for (const { dir, op } of dirOptions(this.options)) {\n            const offset = p[dir] - this.previousPoint[dir];\n            const k = scaleK(op.scale);\n            const domain = op.scale.domain();\n            const newDomain = domain.map(d => d - k * offset);\n            if (applyNewDomain(op, newDomain)) {\n                changed = true;\n            }\n        }\n        this.previousPoint = p;\n        if (changed) {\n            this.scaleUpdated.dispatch();\n        }\n    }\n\n    private onMouseDown(event: PointerEvent) {\n        if (event.pointerType !== 'mouse') {\n            return;\n        }\n        this.el.setPointerCapture(event.pointerId);\n        this.previousPoint = this.point(event);\n        this.el.style.cursor = 'grabbing';\n    }\n\n    private onMouseUp(event: PointerEvent) {\n        if (this.previousPoint === null) {\n            return;\n        }\n        this.previousPoint = null\n        this.el.releasePointerCapture(event.pointerId);\n        this.el.style.cursor = '';\n    }\n}\n","import { CapableElement, ChartZoomOptions, ResolvedOptions } from \"./options\";\nimport { ChartZoomTouch } from './touch';\nimport { ChartZoomWheel } from './wheel';\nimport { EventDispatcher } from '../utils';\nimport { ChartZoomMouse } from './mouse';\n\nconst defaultAxisOptions = {\n    minDomain: -Infinity,\n    maxDomain: Infinity,\n    minDomainExtent: 0,\n    maxDomainExtent: Infinity,\n} as const;\n\nexport class ChartZoom {\n    options: ResolvedOptions;\n    private touch: ChartZoomTouch;\n    private mouse: ChartZoomMouse;\n    private wheel: ChartZoomWheel;\n    private scaleUpdated = new EventDispatcher<[]>();\n\n    constructor(el: CapableElement, options?: ChartZoomOptions) {\n        options = options ?? {};\n        this.options = {\n            x: options.x && { ...defaultAxisOptions, ...options.x },\n            y: options.y && { ...defaultAxisOptions, ...options.y },\n        };\n\n        this.touch = new ChartZoomTouch(el, this.options);\n        this.mouse = new ChartZoomMouse(el, this.options);\n        this.wheel = new ChartZoomWheel(el, this.options);\n\n        const cb = () => this.scaleUpdated.dispatch();\n        this.touch.scaleUpdated.on(cb);\n        this.mouse.scaleUpdated.on(cb);\n        this.wheel.scaleUpdated.on(cb);\n    }\n\n    onScaleUpdated(callback: () => void) {\n        this.scaleUpdated.on(callback);\n    }\n\n    /** Call this when scale updated outside */\n    update() {\n        this.touch.update();\n    }\n}\n","import { rgb } from 'd3-color';\n\nimport { RenderModel, DataPoint } from './renderModel';\nimport { LineChartRenderer } from './lineChartRenderer';\nimport { TimeChartOptions, TimeChartSeriesOptions, ResolvedOptions, ZoomOptions, ResolvedZoomOptions } from './options';\nimport { CanvasLayer } from './canvasLayer';\nimport { SVGLayer } from './svgLayer';\nimport { ChartZoom } from './chartZoom';\n\nconst defaultOptions = {\n    pixelRatio: window.devicePixelRatio,\n    lineWidth: 1,\n    backgroundColor: rgb(255, 255, 255, 1),\n    paddingTop: 10,\n    paddingRight: 10,\n    paddingLeft: 45,\n    paddingBottom: 20,\n    xRange: 'auto',\n    yRange: 'auto',\n    realTime: false,\n    baseTime: 0,\n    debugWebGL: false,\n} as const;\n\nconst defaultSeriesOptions = {\n    color: rgb(0, 0, 0, 1),\n    name: '',\n} as const;\n\nexport default class TimeChart {\n    public options: ResolvedOptions;\n\n    private model: RenderModel;\n    private lineChartRenderer: LineChartRenderer;\n\n    private canvasLayer: CanvasLayer;\n    private svgLayer: SVGLayer;\n\n    constructor(private el: HTMLElement, options?: TimeChartOptions) {\n        options = options ?? {};\n        const series: TimeChartSeriesOptions[] = options.series?.map(s => ({\n            data: [] as DataPoint[],\n            ...defaultSeriesOptions,\n            ...s,\n        })) ?? [];\n        const renderOptions = {\n            ...defaultOptions,\n            ...options,\n            series,\n        };\n\n        this.model = new RenderModel(renderOptions);\n        this.canvasLayer = new CanvasLayer(el, renderOptions, this.model);\n        this.svgLayer = new SVGLayer(el, renderOptions, this.model);\n        this.lineChartRenderer = new LineChartRenderer(this.model, this.canvasLayer.gl, renderOptions);\n\n        this.options = Object.assign(renderOptions, {\n            zoom: this.registerZoom(options.zoom)\n        });\n        this.onResize();\n        window.addEventListener('resize', () => this.onResize());\n    }\n\n    private registerZoom(zoomOptions: ZoomOptions | undefined) {\n        if (zoomOptions) {\n            const z = new ChartZoom(this.el, {\n                x: zoomOptions.x && {\n                    ...zoomOptions.x,\n                    scale: this.model.xScale,\n                },\n                y: zoomOptions.y && {\n                    ...zoomOptions.y,\n                    scale: this.model.yScale,\n                }\n            });\n            const resolvedOptions = z.options as ResolvedZoomOptions\n            this.model.updated.on(() => {\n                const dirs = [\n                    [resolvedOptions.x, this.model.xScale, this.model.xRange],\n                    [resolvedOptions.y, this.model.yScale, this.model.yRange],\n                ] as const;\n                for (const [op, scale, range] of dirs) {\n                    if (!op?.autoRange) {\n                        continue;\n                    }\n                    let [min, max] = scale.domain();\n                    if (range) {\n                        min = Math.min(min, range.min);\n                        max = Math.max(max, range.max);\n                    }\n                    op.minDomain = min;\n                    op.maxDomain = max;\n                }\n                z.update();\n            });\n            z.onScaleUpdated(() => {\n                this.options.xRange = null;\n                this.options.yRange = null;\n                this.options.realTime = false;\n                this.update();\n            });\n            return resolvedOptions;\n        }\n    }\n\n    onResize() {\n        const canvas = this.canvasLayer.canvas;\n        this.model.resize(canvas.clientWidth, canvas.clientHeight);\n        this.svgLayer.onResize();\n        this.canvasLayer.onResize();\n        this.lineChartRenderer.onResize(canvas.clientWidth, canvas.clientHeight);\n        this.update();\n    }\n\n    update() {\n        this.model.requestRedraw();\n    }\n}\n"],"names":["domainSearch","data","start","end","value","key","minDomain","maxDomain","ratio","expectedIndex","Math","ceil","EventDispatcher","[object Object]","this","callback","callbacks","push","args","cb","RenderModel","options","scaleLinear","Map","xRange","xScale","domain","min","max","yRange","yScale","width","height","op","range","paddingLeft","paddingRight","paddingBottom","paddingTop","s","series","seriesInfo","has","set","yRangeUpdatedIndex","filter","length","opXRange","opYRange","map","x","realTime","currentDomain","maxMinY","arr","Infinity","v","maxMin","slice","get","d","y","nice","updated","dispatch","redrawRequested","requestAnimationFrame","time","update","ARRAY_TYPE","Float32Array","Array","create","out","glMatrix.ARRAY_TYPE","subtract","a","b","hypot","i","arguments","sqrt","vec","VertexAttribLocations","createShader","gl","type","source","debug","shader","throwIfFalsy","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","deleteShader","Error","resolveColorRGBA","color","rgbColor","rgb","r","g","opacity","vsSource","DATA_POINT","DIR","LineChartWebGLProgram","vertexSource","fragmentSource","program","createProgram","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","useProgram","super","locations","uModelScale","getUniformLocation","uModelTranslation","uProjectionScale","uLineWidth","uColor","BYTES_PER_POINT","BYTES_PER_ELEMENT","VertexArray","dataPoints","firstDataPointIndex","vao","createVertexArray","bind","dataBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","BUFFER_DATA_POINT_CAPACITY","DYNAMIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","bindVertexArray","clear","deleteBuffer","deleteVertexArray","remainDPCapacity","remainDPCount","isOverflow","numDPtoAdd","extraBufferLength","INDEX_PER_POINT","buffer","bi","vDP","vec2.create","vPreviousDP","dir1","dir2","calc","dp","previousDP","len","vec2.subtract","vec2.negate","put","dir","bufferSubData","renderIndex","first","count","drawArrays","TRIANGLE_STRIP","SeriesVertexArray","activeArray","bufferedDataPointNum","newArray","vertexArrays","lastVertexArray","addDataPoints","renderDomain","minIndex","maxIndex","minArrayIndex","floor","maxArrayIndex","draw","LineChartRenderer","model","debugWebGL","on","drawFrame","use","arrays","syncBuffer","scale","vec2.divide","vec2.inverse","uniform2fv","syncDomain","ds","uniform4fv","lineWidth","uniform1f","invert","m","zero","xSvgToView","ySvgToView","one","scaling","CanvasLayer","el","style","position","canvas","document","createElement","appendChild","ctx","getContext","bgColor","backgroundColor","clearColor","pixelRatio","clientWidth","clientHeight","viewport","COLOR_BUFFER_BIT","SVGLayer","axisBottom","axisLeft","svg","select","append","svgNode","node","xg","yg","xs","xts","scaleTime","baseTime","xAxis","call","yAxis","attr","scaleK","applyNewDomain","inExtent","previousDomain","extent","maxDomainExtent","minDomainExtent","deltaE","deltaO","eps","rows","_","c","row","zip","some","pd","abs","clamp","DIRECTION","dirOptions","X","Y","undefined","ChartZoomTouch","UNKNOWN","addEventListener","e","onTouchStart","passive","onTouchEnd","onTouchMove","syncEnabled","syncTouchAction","sort","enabled","actions","touchAction","join","majorDirection","mean","reduce","variance","sumX","sumY","sumXY","sumXX","p","det","k","linearRegression","t","current","touches","boundingBox","getBoundingClientRect","ts","identifier","clientX","left","clientY","top","changed","temp","entries","id","previousPoint","previousPoints","calcKB","scaleUpdated","event","vari","varX","varY","touchPoints","ChartZoomWheel","ev","onWheel","preventDefault","deltaX","deltaY","deltaMode","transform","translate","zoom","ctrlKey","altKey","boundingRect","origin","trans","transOrigin","shiftKey","translateCap","zoomCap","ChartZoomMouse","userSelect","onMouseDown","onMouseUp","onMouseMove","point","offset","pointerType","setPointerCapture","pointerId","cursor","releasePointerCapture","defaultAxisOptions","ChartZoom","touch","mouse","wheel","defaultOptions","window","devicePixelRatio","defaultSeriesOptions","name","renderOptions","canvasLayer","svgLayer","lineChartRenderer","Object","assign","registerZoom","onResize","zoomOptions","z","resolvedOptions","dirs","autoRange","onScaleUpdated","resize","requestRedraw"],"mappings":"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"}